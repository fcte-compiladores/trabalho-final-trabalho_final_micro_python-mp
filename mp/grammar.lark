?start: statement+

?statement: (assign_stmt
          | print_stmt
          | if_stmt
          | while_stmt
          | do_while_stmt
          | func_def
          | return_stmt) SEMICOLON?

do_while_stmt: "do" block "while" "(" expr ")" SEMICOLON?

SEMICOLON: ";"

func_def: "def" NAME "(" [params] ")" ":" block   -> func_def
params: NAME ("," NAME)*
return_stmt: "return" expr                        -> return_stmt

assign_stmt: NAME "=" expr      -> assign
print_stmt: "imprima" "(" expr ")" -> print
if_stmt: "if" expr ":" block ["else" ":" block]     -> if_
       | "if" "(" expr ")" block ["else" block]         -> if_
while_stmt: "while" expr ":" block -> while
           | "while" "(" expr ")" block -> while

block: statement+        -> block
     | LBRACE statement* RBRACE   -> block

LBRACE: "{"
RBRACE: "}"

?expr: expr "+" term   -> add
     | expr "-" term   -> sub
     | expr "==" term  -> eq
     | expr "!=" term  -> ne
     | expr ">" term  -> gt
     | expr "<" term  -> lt
     | expr ">=" term -> ge
     | expr "<=" term -> le
     | expr "and" term -> and_op
     | expr "or" term  -> or_op
     | term

?term: term "*" factor -> mul
     | term "/" factor -> div
     | factor

?factor: "not" factor  -> not_op
       | NUMBER        -> number
       | NAME          -> var
       | ESCAPED_STRING -> string
       | NAME "(" [args] ")" -> func_call
       | "(" expr ")"

args: expr ("," expr)*

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

%import common.NUMBER
%import common.NEWLINE
%import common.WS_INLINE
%ignore WS_INLINE
%ignore NEWLINE
%import common.ESCAPED_STRING
%ignore /#[^\n]*/
